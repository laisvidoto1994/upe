# Test loss: 0.6493123779296875
# Test accuracy: 0.78

import matplotlib.pyplot as plt
import pandas as pd
from __future__ import print_function
import keras
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten,BatchNormalization
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
from keras.regularizers import l2
 
batch_size =  128 
num_classes = 10 
epochs = 12
img_rows, img_cols = 32, 32 
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
 
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')
 
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)
 
input_shape = (32,32,3)
 
model = Sequential() 	 

model.add(Conv2D(32, kernel_size=(3, 3), activation='relu',input_shape=input_shape, padding='same')) 

model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, kernel_size=(3, 3),input_shape=input_shape)) 
model.add(Dropout(0.25))
model.add(Conv2D(128, kernel_size=(3, 3), activation='relu',input_shape=input_shape))

model.add(MaxPooling2D(pool_size=(2, 2))) 
model.add(Conv2D(1024, (3, 3), activation='relu', input_shape=input_shape) )
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.75)) 
 
model.add(Dense(504, activation='relu') )   
model.add(Flatten() )
model.add(Dense(num_classes, activation='softmax') )
 
  
model.summary()
 
model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adadelta(), metrics=['accuracy'] )
		 
dados = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, validation_data=(x_test, y_test) )
   
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
  
  
dados.history.keys()
plt.plot(dados.history['val_loss'], color='lightblue', linewidth=3)
plt.plot(dados.history['val_acc'])
	