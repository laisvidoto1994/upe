# Test loss: 0.6869744460105895
# Test accuracy: 0.765

import keras
from keras.models import Sequential
from keras.utils import np_utils
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization
from keras.layers import Conv2D, MaxPooling2D
from keras.datasets import cifar10
from keras import regularizers
from keras.callbacks import LearningRateScheduler
import numpy as np

batch_size =  128 
num_classes = 10 
epochs = 12
img_rows, img_cols = 32, 32 
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
 
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')
 
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)
 
weight_decay = 1e-4  
  
# criando modelo
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),input_shape=x_train.shape[1:], activation='relu',kernel_regularizer=regularizers.l2(weight_decay))) 

model.add(BatchNormalization())

model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.5)) 

model.add(Conv2D(64, kernel_size=(3, 3), activation='relu')) 
model.add(Conv2D(128, kernel_size=(3, 3), activation='relu',kernel_regularizer=regularizers.l2(weight_decay))) 
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.75))

model.add(Flatten())
model.add(Dense(1024, activation='relu')) 
model.add(Dense(num_classes, activation='softmax')) 


model.summary()
 
model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adadelta(), metrics=['accuracy'] )
		 
dados = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, validation_data=(x_test, y_test) )
   
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
  
  
dados.history.keys()
plt.plot(dados.history['val_loss'], color='lightblue', linewidth=3)
plt.plot(dados.history['val_acc'])