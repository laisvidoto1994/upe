install.packages(c("caret", "dplyr", "ggplot2", "readr"))
# importando arquivos
df_sono = read_csv("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional/sono.csv")
library(readr)
library(dplyr)
library(stats)
library(base)
library(dplyr)
# importando arquivos
df_sono = read_csv("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional/sono.csv")
meu_arquivo = read_delim(file.choose(), sep = ",")
View(df_sono)
count(df_sono, cidade)
sample_n(df_sono, size = 10)
# carrega os dados da tabela para deixar disponivel
data(iris)
library(caret)#Facilitar a partição dos dados
library(lattice)
library(ggplot2)
library(caret)#Facilitar a partição dos dados
#Carregando os dados
data("swiss")
#Setando uma semente
set.seed(123)
#Criando os índices para Holdout
indice = createDataPartition(swiss$Fertility, p=2/3, list = FALSE)
View(indice)
View(swiss)
# Dividindo em treinamento e teste
treinamento.data = swiss[indice,]
View(treinamento.data)
View(indice)
teste.data = swiss[-indice,]
View(teste.data)
# Construção do Modelo de Regressão
modelo1 = lm(Fetility ~ ., data = treinamento.data)
# Construção do Modelo de Regressão
modelo1 = lm(Fertility ~ ., data = treinamento.data)
View(modelo1)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(teste.data))
View(treinamento.data)
#Métricas para Avaliar o modelo
modeloAjustado1      = R2(valoresPreditos1, teste.data$Fertility)
ErroAbsoluto         = MAE(valoresPreditos1, teste.data$Fertility)
ErroMedioQuadratico1 = RMSE(valoresPreditos1, teste.data$Fertility)
#Definição da Partição de Dados
metodo2 = trainControl(method="LOOCV")
modelo2 = train(Fertility ~ ., data = data.frame(treinamento.data), method="lm", trControl=metodo2)
# Calculo do Valor predito
valoresPreditos2 = predict(modelo2, newdata = data.frame(teste.data) )
#Métricas para Avaliar o modelo
modeloAjustado2      = R2(valoresPreditos2, teste.data$Fertility)
ErroAbsoluto2        = MAE(valoresPreditos2, teste.data$Fertility)
ErroMedioQuadratico2 = RMSE(valoresPreditos2, teste.data$Fertility)
#criando validação cruzada
metodoCV = trainControl(method="cv", number=10)
modelo3 = train(Fertility~ ., data= data.frame(treinamento.data), method="lm", trControl= metodoCV)
# Calculo do Valor predito
valoresPreditos3= predict(modelo3, newdata= data.frame(teste.data))
# metricas para validar o modelo
modeloAjustado3      = R2(valoresPreditos3, teste.data$Fertility)
ErroAbsoluto3        = MAE(valoresPreditos3, teste.data$Fertility)
ErroMedioQuadratico3 = RMSE(valoresPreditos3, teste.data$Fertility)
tempo = c(3.0, 7.0, 2.0, 1.5, 12.0)
nota  = c(4.5, 6.5, 3.7, 4.0, 9.3)
#realizando regressao, quero saber relacaoo de nota com(~) relacao ao tempo
regrecaoNota = lm(nota~tempo)
#visualizar dados na variavel
regrecaoNota
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='blue', lwd=3)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=3)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=1)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=2)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='yellow', lwd=2)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
-------------------------------------#
# leitura de diretorio
getwd()
# onde o arquivo esta
setwd("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional")
# leia os dados do arquivo e venha com o cabeçalho
leituraArquivo = read.table("auto-mpg.txt", header = TRUE)
#renomeando o nome das colunas da tabela leituraArquivo
colnames(leituraArquivo) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo","origem", "nomeCarro" )
#-------------------------------------------------------------#
# trazendo apenas as colunas que eu queiro
#-------------------------------------------------------------#
# trazendo apenas as colunas que eu queiro
dados = cbind.data.frame(leituraArquivo$mpg,leituraArquivo$cilindro,leituraArquivo$deslocamento,leituraArquivo$peso,leituraArquivo$aceleracao,leituraArquivo$anoModelo)
#renomeando o nome das colunas da tabela dados
colnames(dados) = c("mpg", "cilindros", "deslocamento", "peso", "aceleracao", "anoModelo")
#-------------------------------------------------------------#
# amplitude de cada variavel quantitativa
#-------------------------------------------------------------#
amplitudeMpg          = ( range(dados$mpg)[2]          - range(dados$mpg)[1] )
amplitudeCilindros    = ( range(dados$cilindros)[2]    - range(dados$cilindros)[1] )
amplitudeDeslocamento = ( range(dados$deslocamento)[2] - range(dados$deslocamento)[1] )
amplitudePeso         = ( range(dados$peso)[2]         - range(dados$peso)[1] )
amplitudeAceleracao   = ( range(dados$aceleracao)[2]   - range(dados$aceleracao)[1] )
amplitudeAnoModelo    = ( range(dados$anoModelo)[2]    - range(dados$anoModelo)[1] )
#-------------------------------------------------------------#
# min,max,mediana,media dos dados
#-------------------------------------------------------------#
# visualiza dados(min,max,mediana,media)
summary(dados)
#-------------------------------------------------------------#
# variançia
#-------------------------------------------------------------#
var(dados)
varianciaMpg          = var(dados$mpg)
varianciaCilindros    = var(dados$cilindros)
varianciaDeslocamento = var(dados$deslocamento)
varianciaPeso         = var(dados$peso)
varianciaAceleracao   = var(dados$aceleracao)
varianciaAnoModelo    = var(dados$anoModelo)
#-------------------------------------------------------------#
# desvio padrao
#-------------------------------------------------------------#
desvioPadraoMpg          = sd(dados$mpg)
desvioPadraoCilindros    = sd(dados$cilindros)
desvioPadraoDeslocamento = sd(dados$deslocamento)
desvioPadraoPeso         = sd(dados$peso)
desvioPadraoAceleracao   = sd(dados$aceleracao)
desvioPadraoAnoModelo    = sd(dados$anoModelo)
#-------------------------------------------------------------#
# o melhor grafico para cada variavel quantitativa
#-------------------------------------------------------------#
# grafico de linha
plot(dados$cilindros, dados$mpg, main = "consumo combustivel X Qtd. Cilindros", type="o", col="blue",lwd=1, xlab="Cilindro", ylab="Mpg")
# grafico de histograma
hist(dados$mpg, main="Mpg", xlab = "Mpg")
hist(dados$cilindros, main="Cilindros", xlab = "Cilindros")
hist(dados$deslocamento, main="Deslocamento", xlab = "Deslocamento")
hist(dados$peso, main="Peso", xlab = "Peso")
hist(dados$aceleracao, main="Aceleração", xlab = "Aceleração")
hist(dados$anoModelo, main="Ano Modelo", xlab = "Ano Modelo")
#-------------------------------------------------------------#
# graficos das variaveis quantitativas
#-------------------------------------------------------------#
boxplot(dados$mpg ~ dados$cilindros, xlab = "Cilindro", ylab = "Mpg")
boxplot(dados$mpg ~ dados$deslocamento, xlab = "Deslocamento", ylab = "Mpg")
boxplot(dados$mpg ~ dados$peso, xlab = "Peso", ylab = "Mpg")
boxplot(dados$mpg ~ dados$aceleracao, xlab = "Aceleracao", ylab = "Mpg")
boxplot(dados$mpg ~ dados$anoModelo, xlab = "Ano Modelo", ylab = "Mpg")
#-------------------------------------------------------------#
# Correlação
#-------------------------------------------------------------#
# para saber qual tem o maior coleração entre a coluna mpg
corelacaoDeMPG = cor(dados)
corelacaoDeMPG
library(corrplot)
#correlacção nome das variaveis
corrplot(corelacaoDeMPG, method="circle", type = "upper")
#-------------------------------------------------------------#
# partição dos dados em teste e treinamento
#-------------------------------------------------------------#
library(lattice)
library(ggplot2)
library(caret)
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
# Dividindo dados em variaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo1 = lm(mpg ~ ., data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
# Métricas para Avaliar o modelo
modeloAjustado1 = R2(valoresPreditos1, testeDados$mpg)
ErroAbsoluto1   = MAE(valoresPreditos1, testeDados$mpg)
#y= a+b*x
x=dados$cilindros[1]
Yestimado = modelo1$coefficients[1] + modelo1$coefficients[2]*x #-> para deslocamento
#diagrama de dispersao
plot( dados$cilindros,dados$mpg, main = "dispersão mpg X cilindros", xlab ="Cilindro",ylab = "Mpg" )
#criacao da linha do grafico de resposta da regressao
abline(modelo1)
#diagrama de dispersao
plot(fitted(modelo1), main = "diagrama de dispersão1", residuals(modelo1), xlab="Valores Ajustados", ylab="Resíduos")
#-------------------------------------------------------------#
# Modelo de Regressão 2 - 3 maiores
#-------------------------------------------------------------#
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo2 = lm(mpg ~ cilindros,aceleracao,anoModelo, data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos2 = predict(modelo2, newdata = data.frame(testeDados) )
# Métricas para Avaliar o modelo
modeloAjustado2 = R2(valoresPreditos2, testeDados$mpg)
ErroAbsoluto2   = MAE(valoresPreditos2, testeDados$mpg)
#diagrama de dispersao
plot( dados$cilindros, dados$mpg, main = "D")
#criacao da linha do grafico de resposta da regressao
abline(modelo2)
#diagrama de dispersao
plot(fitted(modelo2), main = "diagrama de dispersão2", residuals(modelo2), xlab="Valores Ajustados", ylab="Resíduos")
abline(modelo2)
#-------------------------------------------------------------#
# Modelo de Regressão 3 - o maior
#-------------------------------------------------------------#
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo3 = lm(mpg ~ cilindros, data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos3 = predict(modelo3, newdata = data.frame(testeDados) )
# Métricas para Avaliar o modelo
modeloAjustado3 = R2(valoresPreditos3, testeDados$mpg)
ErroAbsoluto3   = MAE(valoresPreditos3, testeDados$mpg)
#diagrama de dispersao
plot( dados$cilindros, dados$mpg)
#criacao da linha do grafico de resposta da regressao
abline(modelo3)
#diagrama de dispersao
plot(fitted(modelo3), main = "diagrama de dispersão3", residuals(modelo3), xlab="Valores Ajustados", ylab="Resíduos")
#-------------------------------------------------------------#
# teste de normalidade
#-------------------------------------------------------------#
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY1 = shapiro.test(valoresPreditos1)
shapiroNormalidadeY1
# Kolmogorov-Smirnov
ks.test(valoresPreditos1, "pnorm", mean(valoresPreditos1), sd(valoresPreditos1))
hist(valoresPreditos1)
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY2 = shapiro.test(valoresPreditos2)
shapiroNormalidadeY2
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY3 = shapiro.test(valoresPreditos3)
shapiroNormalidadeY3
curve(valoresPreditos1, add=TRUE)
hist(valoresPreditos1)
curve(dnorm, add=TRUE)
curve(valoresPreditos1, add=TRUE)
valoresPreditos1
# alternativas-> "two.sided", "less"-> menos, "greater"->maior
# nivel de confidencialidade = 95%-> conf.level = 0.95
t.test(valoresPreditos1,valoresPreditos2, alternative="less", conf.level = 0.95)
#conseguir comparar dados de consumo de gasolina com mpg e depois cilindros e deslocamento
testeAnova = aov(dados$mpg ~ dados$cilindros + dados$deslocamento + dados$peso)
#dados da tabela dotipo Anova
summary(testeAnova)#99,9% em valor 0.001-1*100
# alternativas-> "two.sided", "less"-> menos, "greater"->maior
# nivel de confidencialidade = 95%-> conf.level = 0.95
t.test(valoresPreditos1,valoresPreditos2, alternative="less", conf.level = 0.95)
#correlacção nome das variaveis
corrplot(corelacaoDeMPG, method="circle", type = "upper")
#correlacção nome das variaveis
corrplot(corelacaoDeMPG, method="circle", type = "upper",title = "teste")
Dispersão
#correlacção nome das variaveis
corrplot(corelacaoDeMPG, method="circle", type = "upper",title = "Dispersão")
#correlacção nome das variaveis
corrplot(corelacaoDeMPG, method="circle", type = "upper", title = "Dispersão dos Dados")
modelo1
