install.packages(c("caret", "dplyr", "ggplot2", "readr"))
# importando arquivos
df_sono = read_csv("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional/sono.csv")
library(readr)
library(dplyr)
library(stats)
library(base)
library(dplyr)
# importando arquivos
df_sono = read_csv("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional/sono.csv")
meu_arquivo = read_delim(file.choose(), sep = ",")
View(df_sono)
count(df_sono, cidade)
sample_n(df_sono, size = 10)
# carrega os dados da tabela para deixar disponivel
data(iris)
library(caret)#Facilitar a partição dos dados
library(lattice)
library(ggplot2)
library(caret)#Facilitar a partição dos dados
#Carregando os dados
data("swiss")
#Setando uma semente
set.seed(123)
#Criando os índices para Holdout
indice = createDataPartition(swiss$Fertility, p=2/3, list = FALSE)
View(indice)
View(swiss)
# Dividindo em treinamento e teste
treinamento.data = swiss[indice,]
View(treinamento.data)
View(indice)
teste.data = swiss[-indice,]
View(teste.data)
# Construção do Modelo de Regressão
modelo1 = lm(Fetility ~ ., data = treinamento.data)
# Construção do Modelo de Regressão
modelo1 = lm(Fertility ~ ., data = treinamento.data)
View(modelo1)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(teste.data))
View(treinamento.data)
#Métricas para Avaliar o modelo
modeloAjustado1      = R2(valoresPreditos1, teste.data$Fertility)
ErroAbsoluto         = MAE(valoresPreditos1, teste.data$Fertility)
ErroMedioQuadratico1 = RMSE(valoresPreditos1, teste.data$Fertility)
#Definição da Partição de Dados
metodo2 = trainControl(method="LOOCV")
modelo2 = train(Fertility ~ ., data = data.frame(treinamento.data), method="lm", trControl=metodo2)
# Calculo do Valor predito
valoresPreditos2 = predict(modelo2, newdata = data.frame(teste.data) )
#Métricas para Avaliar o modelo
modeloAjustado2      = R2(valoresPreditos2, teste.data$Fertility)
ErroAbsoluto2        = MAE(valoresPreditos2, teste.data$Fertility)
ErroMedioQuadratico2 = RMSE(valoresPreditos2, teste.data$Fertility)
#criando validação cruzada
metodoCV = trainControl(method="cv", number=10)
modelo3 = train(Fertility~ ., data= data.frame(treinamento.data), method="lm", trControl= metodoCV)
# Calculo do Valor predito
valoresPreditos3= predict(modelo3, newdata= data.frame(teste.data))
# metricas para validar o modelo
modeloAjustado3      = R2(valoresPreditos3, teste.data$Fertility)
ErroAbsoluto3        = MAE(valoresPreditos3, teste.data$Fertility)
ErroMedioQuadratico3 = RMSE(valoresPreditos3, teste.data$Fertility)
tempo = c(3.0, 7.0, 2.0, 1.5, 12.0)
nota  = c(4.5, 6.5, 3.7, 4.0, 9.3)
#realizando regressao, quero saber relacaoo de nota com(~) relacao ao tempo
regrecaoNota = lm(nota~tempo)
#visualizar dados na variavel
regrecaoNota
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='blue', lwd=3)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=3)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=1)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=2)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='yellow', lwd=2)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
#Gráfico
hist(dados$aceleracao,col="yellow", main="Distribuição normal")
#Gráfico
hist(dados,col="yellow", main="Distribuição normal")
#Gráfico
hist(dados$peso, col="yellow", main="Distribuição normal")
#Gráfico
hist(dados$peso[1,], col="yellow", main="Distribuição normal")
#Gráfico
hist(dados$peso[,1], col="yellow", main="Distribuição normal")
#Gráfico
hist(dados, col="yellow", main="Distribuição normal")
TURA DE DIRETORIO
getwd()
# onde o arquivo esta
setwd("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional")
# leia os dados do arquivo e venha com o cabeçalho
leituraArquivo = read.table("auto-mpg.txt", header = TRUE)
#renomeando o nome das colunas da tabela leituraArquivo
colnames(leituraArquivo) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo","origem", "nomeCarro" )
#-------------------------------------------------------------#
# trazendo apenas as colunas que eu queiro
#-------------------------------------------------------------#
# trazendo apenas as colunas que eu queiro
dados = cbind.data.frame(leituraArquivo$mpg,leituraArquivo$cilindro,leituraArquivo$deslocamento,leituraArquivo$peso,leituraArquivo$aceleracao,leituraArquivo$anoModelo)
#renomeando o nome das colunas da tabela dados
colnames(dados) = c("mpg", "cilindros", "deslocamento", "peso", "aceleracao", "anoModelo")
#-------------------------------------------------------------#
# min,max,mediana,media dos dados
#-------------------------------------------------------------#
# visualiza dados(min,max,mediana,media)
summary(dados)
#Gráfico
hist(dados$mpg, col="yellow", main="Distribuição normal")
#Traçando a curva da normal
curve(dnorm,add=TRUE)
#Teste de Normalidade
shapiro.test(dados$mpg)
ks.test(dados$mpg, "pnorm", mean(dados$mpg), sd(dados$mpg) )
#Teste de Normalidade
shapiro.test(dados$mpg)
ks.test(dados$mpg, "pnorm", mean(dados$mpg), sd(dados$mpg) )
#Traçando a curva da normal
curve(dnorm, add=TRUE)
#Traçando a curva da normal
curve(dnorm, add=TRUE)
?curve
#Gráfico
hist(dados, col="yellow", main="Distribuição normal")
$cilindros
#Gráfico
hist(dados$cilindros, col="yellow", main="Distribuição normal")
#Traçando a curva da normal
curve(dnorm, add=TRUE)
#Teste de Normalidade Shapiro-Wilk
shapiro.test(dados$cilindros)
#Teste de Normalidade Kolmogorov-Smirnov
ks.test(dados$cilindros, "pnorm", mean(dados$cilindros), sd(dados$cilindros) )
#-------------------------------------------------------------#
# teste de normalidade
#-------------------------------------------------------------#
library(htest)
#-------------------------------------------------------------#
# teste de normalidade
#-------------------------------------------------------------#
install.packages(htest)
install.packages("htest")
boxplot(dados$mpg, dados$cilindros)
#Gráfico
hist(dados$cilindros, col="yellow", main="Distribuição normal")
#Teste de Normalidade Shapiro-Wilk
shapiro.test(dados$cilindros)
#Teste de Normalidade Shapiro-Wilk
shapiro = shapiro.test(dados$cilindros)
View(shapiro)
shapiro[p.value]
shapiro
shapiro.p-value
shapiro[1]
shapiro[2]
shapiro$p.value
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
# Dividindo dados em variaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
library(lattice)
library(ggplot2)
library(caret)
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
# Dividindo dados em variaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
#-------------------------------------------------------------#
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo1 = lm(mpg ~ ., data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
modeloAjustado1      = R2(valoresPreditos1, testeDados$mpg)
ErroAbsoluto         = MAE(valoresPreditos1, testeDados$mpg)
ErroMedioQuadratico1 = RMSE(valoresPreditos1, testeDados$mpg)
#-------------------------------------------------------------#
# teste de normalidade
#-------------------------------------------------------------#
library(htest)
# Kolmogorov-Smirnov
ks.test(dados$cilindros,"pnorm", mediaCilindros, desvioPadraoCilindros)
# Kolmogorov-Smirnov
ks.test(dados$cilindros,"pnorm", mediaCilindros, desvioPadraoCilindros)
#-------------------------------------------------------------#
# teste de normalidade
#-------------------------------------------------------------#
mediaCilindros = mean(dados$cilindros)
desvioPadraoCilindros = sd(dados$cilindros)
# Kolmogorov-Smirnov
ks.test(dados$cilindros,"pnorm", mediaCilindros, desvioPadraoCilindros)
# alternativas-> "two.sided", "less"-> menos, "greater"->maior
# nivel de confidencialidade = 95%-> conf.level = 0.95
t.test(dados$cilindros, alternative="two.sided", conf.level = 0.95, mu = 690)
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY = shapiro.test(dados$mpg)
# Kolmogorov-Smirnov
ks.test(dados$mpg,"pnorm", mean(dados$mpg), sd(dados$mpg))
# visualizar valor do shapiro
shapiroNormalidadey$p.value
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeX = shapiro.test(dados$cilindros)
# Kolmogorov-Smirnov
ks.test(dados$cilindros,"pnorm", mean(dados$cilindros), sd(dados$cilindros))
# Kolmogorov-Smirnov
ks.test(dados$mpg,"pnorm", mean(dados$mpg), sd(dados$mpg))
# visualizar valor do shapiro
shapiroNormalidadey$p.value
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY = shapiro.test(dados$mpg)
# Kolmogorov-Smirnov
ks.test(dados$mpg,"pnorm", mean(dados$mpg), sd(dados$mpg))
# Kolmogorov-Smirnov
ks.test(dados$mpg,'pnorm', mean(dados$mpg), sd(dados$mpg))
# Kolmogorov-Smirnov
ks.test(dados$mpg,pnorm, mean(dados$mpg), sd(dados$mpg))
# cruzando os valores
#t.test(x = shapiroNormalidadeX, y = shapiroNormalidadeY, alternative="two.sided", conf.level = 0.95)
t.test(x = shapiroNormalidadeX, y = shapiroNormalidadeY, paired = TRUE,conf.level = 0.90)
# cruzando os valores
#t.test(x = shapiroNormalidadeX, y = shapiroNormalidadeY, alternative="two.sided", conf.level = 0.95)
t.test(shapiroNormalidadeX, shapiroNormalidadeY, paired = TRUE,conf.level = 0.90)
# cruzando os valores
#t.test(x = shapiroNormalidadeX, y = shapiroNormalidadeY, alternative="two.sided", conf.level = 0.95)
t.test(shapiroNormalidadeX, shapiroNormalidadeY, paired = TRUE,conf.level = 0.90)
View(shapiroNormalidadeX)
# cruzando os valores
#t.test(x = shapiroNormalidadeX, y = shapiroNormalidadeY, alternative="two.sided", conf.level = 0.95)
t.test(dados$mpg, dados$cilindros, paired = TRUE,conf.level = 0.90)
# cruzando os valores
#t.test(x = dados$mpg, y = dados$cilindros, alternative="two.sided", conf.level = 0.95)
t.test(dados$mpg, dados$cilindros, paired = TRUE,conf.level = 0.90)
# Kolmogorov-Smirnov
ks.test(dados$cilindros,"pnorm", mean(dados$cilindros), sd(dados$cilindros))
# cruzando os valores
t.test(x = dados$mpg, y = dados$cilindros, alternative="two.sided", conf.level = 0.95)
var(dados)
vetorAno = c( 2007,2008,2009,2010,2011)
vetorMatriculado = c( 734,753,777,794,819)
barplot(vetorAno)
plot(vetorAno,vetorMatriculado, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# construindo grafico de pizza
pie(vetorAno,main="titulo")
plot(vetorAno, ylab="plot com dataframe", xlab="observaÃ§Ãµes", col="red")
plot(vetorAno, ylab="plot com dataframe", xlab="observaÃ§Ãµes", col="blue")
# grafico de histograma
hist(vetorAno)
# grafico de histograma
hist(vetorAno, main="teste")
boxplot(vetorAno, vetorMatriculado)
plot(vetorAno,vetorMatriculado, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
barplot(vetorAno)
barplot(dados)
barplot(dados$mpg)
barplot(dados$mpg, dados$cilindros)
barplot(dados$cilindros)
# construindo grafico de pizza
pie(dados$cilindros, main="titulo")
# grafico de histograma
hist(dados$cilindros, main="teste")
boxplot(dados$mpg, dados$cilindros)
# grafico de linha
plot(dados$mpg ,dados$cilindros, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$mpg ,dados$cilindros, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de colunas
barplot(dados$cilindros)
# construindo grafico de pizza
pie(dados$cilindros, main="titulo")
# grafico de histograma
hist(dados$cilindros, main="teste")
boxplot(dados$mpg, dados$cilindros)
# construindo grafico de pizza
pie(dados$anoModelo, main="titulo")
# construindo grafico de pizza
pie(dados$cilindros, main="titulo")
# construindo grafico de pizza
pie(dados$deslocamento, main="titulo")
# construindo grafico de pizza
pie(dados$peso, main="titulo")
# construindo grafico de pizza
pie(dados$aceleracao, main="titulo")
# construindo grafico de pizza
pie(dados$anoModelo, main="titulo")
# grafico de histograma
hist(dados$mpg, main="teste")
boxplot(dados$mpg, dados$cilindros)
# grafico de linha
plot(dados$mpg, dados$cilindros, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$mpg, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$cilindros, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$deslocamento, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$peso, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$aceleracao, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$anoModelo, main = "teste", type="o", col="blue",lwd=3, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$anoModelo, main = "teste", type="o", col="blue",lwd=2, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$anoModelo, main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de barras
barplot(dados$cilindros)
# grafico de barras
barplot(dados$mpg)
# grafico de barras
barplot(dados$cilindros)
# grafico de barras
barplot(dados$deslocamento)
# grafico de barras
barplot(dados$peso)
# grafico de barras
barplot(dados$aceleracao)
# grafico de barras
barplot(dados$anoModelo)
# grafico de barras
barplot(dados$cilindros)
# grafico de linha
plot(dados$anoModelo, main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de histograma
hist(dados$mpg, main="teste")
boxplot(dados$mpg, dados$cilindros)
hist(dados$cilindros, main="teste")
hist(dados$deslocamento, main="teste")
hist(dados$peso, main="teste")
hist(dados$aceleracao, main="teste")
hist(dados$anoModelo, main="teste")
range(dados$anoModelo)[2]
rangeAnoModelo = range(dados$anoModelo)
range(dados$anoModelo)
amplitudeMpg = ( range(dados$mpg)[2] - range(dados$mpg)[1] )
ampl = (range(dados)[2] - range(dados)[1])
#-------------------------------------------------------------#
# variançia
#-------------------------------------------------------------#
var(dados)
varianciaMpg = var(dados$mpg)
varianciaCilindros = var(dados$cilindros)
varianciaDeslocamento = var(dados$deslocamento)
varianciaPeso = var(dados$peso)
varianciaAceleracao = var(dados$aceleracao)
varianciaAnoModelo = var(dados$anoModelo)
getwd()
# onde o arquivo esta
setwd("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional")
# leia os dados do arquivo e venha com o cabeçalho
leituraArquivo = read.table("auto-mpg.txt", header = TRUE)
#renomeando o nome das colunas da tabela leituraArquivo
colnames(leituraArquivo) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo","origem", "nomeCarro" )
#-------------------------------------------------------------#
# trazendo apenas as colunas que eu queiro
#-------------------------------------------------------------#
# trazendo apenas as colunas que eu queiro
dados = cbind.data.frame(leituraArquivo$mpg,leituraArquivo$cilindro,leituraArquivo$deslocamento,leituraArquivo$peso,leituraArquivo$aceleracao,leituraArquivo$anoModelo)
#renomeando o nome das colunas da tabela dados
colnames(dados) = c("mpg", "cilindros", "deslocamento", "peso", "aceleracao", "anoModelo")
#-------------------------------------------------------------#
# min,max,mediana,media dos dados
#-------------------------------------------------------------#
# visualiza dados(min,max,mediana,media)
summary(dados)
#-------------------------------------------------------------#
# amplitude de cada variavel quantitativa
#-------------------------------------------------------------#
amplitudeMpg          = ( range(dados$mpg)[2]          - range(dados$mpg)[1] )
amplitudeCilindros    = ( range(dados$cilindros)[2]    - range(dados$cilindros)[1] )
amplitudeDeslocamento = ( range(dados$deslocamento)[2] - range(dados$deslocamento)[1] )
amplitudePeso         = ( range(dados$peso)[2]         - range(dados$peso)[1] )
amplitudeAceleracao   = ( range(dados$aceleracao)[2]   - range(dados$aceleracao)[1] )
amplitudeAnoModelo    = ( range(dados$anoModelo)[2]    - range(dados$anoModelo)[1] )
#-------------------------------------------------------------#
# variançia
#-------------------------------------------------------------#
var(dados)
varianciaMpg          = var(dados$mpg)
varianciaCilindros    = var(dados$cilindros)
varianciaDeslocamento = var(dados$deslocamento)
varianciaPeso         = var(dados$peso)
varianciaAceleracao   = var(dados$aceleracao)
varianciaAnoModelo    = var(dados$anoModelo)
desvioPadrao = sd(dados)
desvioPadraoMpg          = sd(dados$mpg)
desvioPadraoCilindros    = sd(dados$cilindros)
desvioPadraoDeslocamento = sd(dados$deslocamento)
desvioPadraoPeso         = sd(dados$peso)
desvioPadraoAceleracao   = sd(dados$aceleracao)
desvioPadraoAnoModelo    = sd(dados$anoModelo)
boxplot(dados$mpg ~ dados$cilindros)
boxplot(dados$mpg ~ dados$deslocamento)
boxplot(dados$mpg ~ dados$peso)
boxplot(dados$mpg ~ dados$aceleracao)
boxplot(dados$mpg ~ dados$anoModelo)
hist(dados$mpg, main="teste")
hist(dados$cilindros, main="teste")
hist(dados$deslocamento, main="teste")
hist(dados$peso, main="teste")
hist(dados$aceleracao, main="teste")
hist(dados$anoModelo, main="teste")
library(lattice)
library(ggplot2)
library(caret)
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
# Dividindo dados em variaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
#-------------------------------------------------------------#
# Modelo de Regressão 1 - comparação do mpg com todos os dados
#-------------------------------------------------------------#
modelo1 = lm(mpg ~ ., data = treinamentoDados)
#valor de intercept
modelo1$coefficients[1]
# valor do x = cilindros
modelo1$coefficients[2]
# valor do x = deslocamento
modelo1$coefficients[3]
# valor do x = peso
modelo1$coefficients[4]
# valor do x = aceleracao
modelo1$coefficients[5]
# valor do x = anoModelo
modelo1$coefficients[5]
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
# Métricas para Avaliar o modelo
modeloAjustado1      = R2(valoresPreditos1, testeDados$mpg)
ErroAbsoluto         = MAE(valoresPreditos1, testeDados$mpg)
ErroMedioQuadratico1 = RMSE(valoresPreditos1, testeDados$mpg)
#y= a+b*x
x=dados$cilindros[1]
Yestimado = modelo1$coefficients[1] + modelo1$coefficients[2]*x #-> para deslocamento
#diagrama de dispersao
plot(dados$mpg, dados$cilindros)
#Valores Ajustados
modelo1$fitted.values
#Definição da Partição de Dados
metodo2 = trainControl(method="LOOCV")
modelo2 = train(mpg ~ ., data = data.frame(treinamentoDados), method="lm", trControl=metodo2)
# Calculo do Valor predito
valoresPreditos2 = predict(modelo2, newdata = data.frame(testeDados) )
#Métricas para Avaliar o modelo
modeloAjustado2      = R2(valoresPreditos2, testeDados$mpg)
ErroAbsoluto2        = MAE(valoresPreditos2, testeDados$mpg)
ErroMedioQuadratico2 = RMSE(valoresPreditos2, testeDados$mpg)
#-----------------------
# para saber qual tem o maior coleração entre a coluna mpg
corelacaoDeMPG = cor(dados$mpg, dados$cilindros)
#-------------------------------------------------------------#
# Grafico de Dispersão
#-------------------------------------------------------------#
#Valores Ajustados
modelo1$fitted.values
#mostra o valor de erro do real - o valor estimado da regrecaoNota
modelo1$residuals
#diagrama de dispersao
plot(fitted(modelo1), residuals(modelo1), xlab="Valores Ajustados", ylab="Resíduos")
