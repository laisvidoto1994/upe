install.packages(c("caret", "dplyr", "ggplot2", "readr"))
# importando arquivos
df_sono = read_csv("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional/sono.csv")
library(readr)
library(dplyr)
library(stats)
library(base)
library(dplyr)
# importando arquivos
df_sono = read_csv("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional/sono.csv")
meu_arquivo = read_delim(file.choose(), sep = ",")
View(df_sono)
count(df_sono, cidade)
sample_n(df_sono, size = 10)
# carrega os dados da tabela para deixar disponivel
data(iris)
library(caret)#Facilitar a partição dos dados
library(lattice)
library(ggplot2)
library(caret)#Facilitar a partição dos dados
#Carregando os dados
data("swiss")
#Setando uma semente
set.seed(123)
#Criando os índices para Holdout
indice = createDataPartition(swiss$Fertility, p=2/3, list = FALSE)
View(indice)
View(swiss)
# Dividindo em treinamento e teste
treinamento.data = swiss[indice,]
View(treinamento.data)
View(indice)
teste.data = swiss[-indice,]
View(teste.data)
# Construção do Modelo de Regressão
modelo1 = lm(Fetility ~ ., data = treinamento.data)
# Construção do Modelo de Regressão
modelo1 = lm(Fertility ~ ., data = treinamento.data)
View(modelo1)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(teste.data))
View(treinamento.data)
#Métricas para Avaliar o modelo
modeloAjustado1      = R2(valoresPreditos1, teste.data$Fertility)
ErroAbsoluto         = MAE(valoresPreditos1, teste.data$Fertility)
ErroMedioQuadratico1 = RMSE(valoresPreditos1, teste.data$Fertility)
#Definição da Partição de Dados
metodo2 = trainControl(method="LOOCV")
modelo2 = train(Fertility ~ ., data = data.frame(treinamento.data), method="lm", trControl=metodo2)
# Calculo do Valor predito
valoresPreditos2 = predict(modelo2, newdata = data.frame(teste.data) )
#Métricas para Avaliar o modelo
modeloAjustado2      = R2(valoresPreditos2, teste.data$Fertility)
ErroAbsoluto2        = MAE(valoresPreditos2, teste.data$Fertility)
ErroMedioQuadratico2 = RMSE(valoresPreditos2, teste.data$Fertility)
#criando validação cruzada
metodoCV = trainControl(method="cv", number=10)
modelo3 = train(Fertility~ ., data= data.frame(treinamento.data), method="lm", trControl= metodoCV)
# Calculo do Valor predito
valoresPreditos3= predict(modelo3, newdata= data.frame(teste.data))
# metricas para validar o modelo
modeloAjustado3      = R2(valoresPreditos3, teste.data$Fertility)
ErroAbsoluto3        = MAE(valoresPreditos3, teste.data$Fertility)
ErroMedioQuadratico3 = RMSE(valoresPreditos3, teste.data$Fertility)
tempo = c(3.0, 7.0, 2.0, 1.5, 12.0)
nota  = c(4.5, 6.5, 3.7, 4.0, 9.3)
#realizando regressao, quero saber relacaoo de nota com(~) relacao ao tempo
regrecaoNota = lm(nota~tempo)
#visualizar dados na variavel
regrecaoNota
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='blue', lwd=3)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=3)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=1)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=2)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='yellow', lwd=2)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
# LEITURA DE DIRETORIO
getwd()
setwd("C:\Users\Edna Soares\Desktop\Nova pasta\upe\05 - Estatistica Computacional")
setwd("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional")
# leia os dados do arquivo e venha com o cabeÃÂ§alho
dados = read.table("auto-mpg.txt", header = TRUE)
View(dados)
#renomeando o nome das colunas da tabela
colnames(dados) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo","origem", "nomeCarro" )
boxplot(dados$mpg ~ dados$cilindros)
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
library(caret)
library(lattice)
library(ggplot2)
library(caret)
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
View(indice)
#Setando uma semente
set.seed(123)
# Dividindo dados em variaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
# Construção do Modelo de Regressão
modelo1 = lm(mpg ~ ., data = treinamentoDados)
View(modelo1)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
# LEITURA DE DIRETORIO
getwd()
setwd("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional")
# leia os dados do arquivo e venha com o cabeÃÂ§alho
dados = read.table("auto-mpg.txt", header = TRUE)
#renomeando o nome das colunas da tabela
colnames(dados) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo","origem", "nomeCarro" )
boxplot(dados$mpg ~ dados$cilindros)
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
# Dividindo dados em variaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
# Construção do Modelo de Regressão
modelo1 = lm(mpg ~ ., data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
treinamentoDados
summary(modelo1)
dados[,1]
dados[1,]
cbind.data.frame(dados$mpg,dados$cilindros,dados$deslocamento,dados$cavaloVapor,dados$peso,dados$aceleracao,dados$anoModelo)
novoDados= cbind.data.frame(dados$mpg,dados$cilindros,dados$deslocamento,dados$cavaloVapor,dados$peso,dados$aceleracao,dados$anoModelo)
novoDados[1,]
dados= cbind.data.frame(novoDados$mpg,novoDados$cilindros,novoDados$deslocamento,novoDados$cavaloVapor,novoDados$peso,novoDados$aceleracao,novoDados$anoModelo)
# leia os dados do arquivo e venha com o cabeÃÂ§alho
novoDados = read.table("auto-mpg.txt", header = TRUE)
dados= cbind.data.frame(novoDados$mpg,novoDados$cilindros,novoDados$deslocamento,novoDados$cavaloVapor,novoDados$peso,novoDados$aceleracao,novoDados$anoModelo)
# leia os dados do arquivo e venha com o cabeÃÂ§alho
novoDados = read.table("auto-mpg.txt", header = TRUE,sep" ",dec=".")
# leia os dados do arquivo e venha com o cabeÃÂ§alho
novoDados = read.table("auto-mpg.txt", header = TRUE,sep=" ",dec=".")
# leia os dados do arquivo e venha com o cabeÃÂ§alho
novoDados = read.table("auto-mpg.txt", header = TRUE,sep=",",dec=".")
novoDados
novoDados[1,]
novoDados[,1]
# leia os dados do arquivo e venha com o cabeÃÂ§alho
novoDados = read.table("auto-mpg.txt", header = TRUE)#,sep=",",dec=".")
novoDados
dados= cbind.data.frame(novoDados$mpg,novoDados$cilindro,novoDados$deslocamento,novoDados$cavaloVapor,novoDados$peso,novoDados$aceleracao,novoDados$anoModelo)
#renomeando o nome das colunas da tabela
colnames(novoDados) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo","origem", "nomeCarro" )
dados= cbind.data.frame(novoDados$mpg,novoDados$cilindro,novoDados$deslocamento,novoDados$cavaloVapor,novoDados$peso,novoDados$aceleracao,novoDados$anoModelo)
dados= cbind.data.frame(novoDados$mpg,novoDados$cilindro,novoDados$deslocamento,novoDados$cavaloVapor,novoDados$peso,novoDados$aceleracao,novoDados$anoModelo)
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
# Dividindo dados em variaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
# Construção do Modelo de Regressão
modelo1 = lm(mpg ~ ., data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
dados$mpg
dados
dados$novoDados$mpg
# leia os dados do arquivo e venha com o cabeÃÂ§alho
novoDados = read.table("auto-mpg.txt", header = TRUE)#,sep=",",dec=".")
#renomeando o nome das colunas da tabela
colnames(novoDados) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo","origem", "nomeCarro" )
novoDados
novoDados[1,]
dados= cbind.data.frame(novoDados$mpg,novoDados$cilindro,novoDados$deslocamento,novoDados$cavaloVapor,novoDados$peso,novoDados$aceleracao,novoDados$anoModelo)
dados[1,]
colnames(novoDados) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo")
colnames(dados) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo")
#media
media = mean()
colnames(dados) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo")
#media
media = mean()
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
# Dividindo dados em variaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
# Construção do Modelo de Regressão
modelo1 = lm(mpg ~ ., data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
modelo1
summary(modelo1)
dados$cavaloVapor
dados= cbind.data.frame(novoDados$mpg,novoDados$cilindro,novoDados$deslocamento,novoDados$peso,novoDados$aceleracao,novoDados$anoModelo)
colnames(dados) = c("mpg", "cilindros", "deslocamento", "peso", "aceleracao", "anoModelo")
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
# Dividindo dados em variaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
# Construção do Modelo de Regressão
modelo1 = lm(mpg ~ ., data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
#Métricas para Avaliar o modelo
modeloAjustado1      = R2(valoresPreditos1, testeDados$mpg)
ErroAbsoluto         = MAE(valoresPreditos1, testeDados$mpg)
ErroMedioQuadratico1 = RMSE(valoresPreditos1, testeDados$mpg)
# para saber qual tem o maior coleração entre a coluna mpg
corelacaoDeMPG = cor(dados$mpg, dados$cilindros)
#conseguir comparar dados de consumo de gasolina com mpg e depois cilindros e deslocamento
comparacao = aov(dados$mpg ~ dados$cilindros + dados$deslocamento)
summary(comparacao)
#diagrama de dispersao
plot(dados$mpg, dados$cilindros, main = "teste", type ='o', col='blue', lwd=3)
# LEITURA DE DIRETORIO
getwd()
# onde o arquivo esta
setwd("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional")
# leia os dados do arquivo e venha com o cabeçalho
leituraArquivo = read.table("auto-mpg.txt", header = TRUE)
#renomeando o nome das colunas da tabela leituraArquivo
colnames(leituraArquivo) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo","origem", "nomeCarro" )
View(leituraArquivo)
# trazendo apenas as colunas que eu queiro
dados = cbind.data.frame(leituraArquivo$mpg,leituraArquivo$cilindro,leituraArquivo$deslocamento,leituraArquivo$peso,leituraArquivo$aceleracao,leituraArquivo$anoModelo)
View(dados)
#renomeando o nome das colunas da tabela dados
colnames(dados) = c("mpg", "cilindros", "deslocamento", "peso", "aceleracao", "anoModelo")
boxplot(dados$mpg ~ dados$cilindros)
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
riaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo1 = lm(mpg ~ ., data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
modeloAjustado1      = R2(valoresPreditos1, testeDados$mpg)
ErroAbsoluto         = MAE(valoresPreditos1, testeDados$mpg)
ErroMedioQuadratico1 = RMSE(valoresPreditos1, testeDados$mpg)
#conseguir comparar dados de consumo de gasolina com mpg e depois cilindros e deslocamento
comparacao = aov(dados$mpg ~ dados$cilindros + dados$deslocamento + dados$peso+ dados$aceleracao + dados$anoModelo)
summary(comparacao)
summary(dados)
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
View(indice)
#conseguir comparar dados de consumo de gasolina com mpg e depois cilindros e deslocamento
comparacao = aov(dados$mpg ~ dados$cilindros + dados$deslocamento + dados$peso+ dados$aceleracao + dados$anoModelo)
summary(comparacao)
comparacao1 = aov(dados$mpg ~ dados$cilindros + dados$deslocamento + dados$peso)
comparacao2 = aov(dados$mpg ~ dados$cilindros + dados$aceleracao + dados$anoModelo)
summary(comparacao1)
summary(comparacao2)
#diagrama de dispersao
plot(dados$mpg, dados$cilindros, main = "teste", type ='o', col='blue', lwd=3)
#diagrama de dispersao
plot(dados$mpg, dados$cilindros, main = "teste", type ='o', col='blue')#, lwd=3)
corelacaoDeMPG
# para saber qual tem o maior coleração entre a coluna mpg
corelacaoDeMPG = cor(dados$mpg, dados$cilindros)
corelacaoDeMPG
# visualiza dados(min,max,mediana,media)
summary(dados)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
valoresPreditos1
modeloAjustado1      = R2(valoresPreditos1, testeDados$mpg)
ErroAbsoluto         = MAE(valoresPreditos1, testeDados$mpg)
ErroMedioQuadratico1 = RMSE(valoresPreditos1, testeDados$mpg)
modelo1
#Valores Ajustados
modelo1$fitted.values
modelo1
