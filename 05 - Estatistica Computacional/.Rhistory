install.packages(c("caret", "dplyr", "ggplot2", "readr"))
# importando arquivos
df_sono = read_csv("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional/sono.csv")
library(readr)
library(dplyr)
library(stats)
library(base)
library(dplyr)
# importando arquivos
df_sono = read_csv("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional/sono.csv")
meu_arquivo = read_delim(file.choose(), sep = ",")
View(df_sono)
count(df_sono, cidade)
sample_n(df_sono, size = 10)
# carrega os dados da tabela para deixar disponivel
data(iris)
library(caret)#Facilitar a partição dos dados
library(lattice)
library(ggplot2)
library(caret)#Facilitar a partição dos dados
#Carregando os dados
data("swiss")
#Setando uma semente
set.seed(123)
#Criando os índices para Holdout
indice = createDataPartition(swiss$Fertility, p=2/3, list = FALSE)
View(indice)
View(swiss)
# Dividindo em treinamento e teste
treinamento.data = swiss[indice,]
View(treinamento.data)
View(indice)
teste.data = swiss[-indice,]
View(teste.data)
# Construção do Modelo de Regressão
modelo1 = lm(Fetility ~ ., data = treinamento.data)
# Construção do Modelo de Regressão
modelo1 = lm(Fertility ~ ., data = treinamento.data)
View(modelo1)
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(teste.data))
View(treinamento.data)
#Métricas para Avaliar o modelo
modeloAjustado1      = R2(valoresPreditos1, teste.data$Fertility)
ErroAbsoluto         = MAE(valoresPreditos1, teste.data$Fertility)
ErroMedioQuadratico1 = RMSE(valoresPreditos1, teste.data$Fertility)
#Definição da Partição de Dados
metodo2 = trainControl(method="LOOCV")
modelo2 = train(Fertility ~ ., data = data.frame(treinamento.data), method="lm", trControl=metodo2)
# Calculo do Valor predito
valoresPreditos2 = predict(modelo2, newdata = data.frame(teste.data) )
#Métricas para Avaliar o modelo
modeloAjustado2      = R2(valoresPreditos2, teste.data$Fertility)
ErroAbsoluto2        = MAE(valoresPreditos2, teste.data$Fertility)
ErroMedioQuadratico2 = RMSE(valoresPreditos2, teste.data$Fertility)
#criando validação cruzada
metodoCV = trainControl(method="cv", number=10)
modelo3 = train(Fertility~ ., data= data.frame(treinamento.data), method="lm", trControl= metodoCV)
# Calculo do Valor predito
valoresPreditos3= predict(modelo3, newdata= data.frame(teste.data))
# metricas para validar o modelo
modeloAjustado3      = R2(valoresPreditos3, teste.data$Fertility)
ErroAbsoluto3        = MAE(valoresPreditos3, teste.data$Fertility)
ErroMedioQuadratico3 = RMSE(valoresPreditos3, teste.data$Fertility)
tempo = c(3.0, 7.0, 2.0, 1.5, 12.0)
nota  = c(4.5, 6.5, 3.7, 4.0, 9.3)
#realizando regressao, quero saber relacaoo de nota com(~) relacao ao tempo
regrecaoNota = lm(nota~tempo)
#visualizar dados na variavel
regrecaoNota
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='blue', lwd=3)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=3)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=1)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='red', lwd=2)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
#diagrama de dispersao
plot(tempo, nota, main = "teste", type ='o', col='yellow', lwd=2)
#criacao da linha do grafico de resposta da regressao
abline(regrecaoNota)
getwd()
# onde o arquivo esta
setwd("C:/Users/Edna Soares/Desktop/Nova pasta/upe/05 - Estatistica Computacional")
# leia os dados do arquivo e venha com o cabeçalho
leituraArquivo = read.table("auto-mpg.txt", header = TRUE)
#renomeando o nome das colunas da tabela leituraArquivo
colnames(leituraArquivo) = c("mpg", "cilindros", "deslocamento", "cavaloVapor", "peso", "aceleracao", "anoModelo","origem", "nomeCarro" )
#-------------------------------------------------------------#
# trazendo apenas as colunas que eu queiro
#-------------------------------------------------------------#
# trazendo apenas as colunas que eu queiro
dados = cbind.data.frame(leituraArquivo$mpg,leituraArquivo$cilindro,leituraArquivo$deslocamento,leituraArquivo$peso,leituraArquivo$aceleracao,leituraArquivo$anoModelo)
#renomeando o nome das colunas da tabela dados
colnames(dados) = c("mpg", "cilindros", "deslocamento", "peso", "aceleracao", "anoModelo")
#-------------------------------------------------------------#
# min,max,mediana,media dos dados
#-------------------------------------------------------------#
# visualiza dados(min,max,mediana,media)
summary(dados)
library(lattice)
library(ggplot2)
library(caret)
#Criando os índices para Holdout
indice = createDataPartition(dados$mpg, p=2/3, list = FALSE)
# Dividindo dados em variaveis treinamento e teste
treinamentoDados = dados[indice,]
testeDados = dados[-indice,]
modelo1 = lm(mpg ~ ., data = treinamentoDados)
#valor de intercept
modelo1$coefficients[1]
# valor do x = cilindros
modelo1$coefficients[2]
# valor do x = deslocamento
modelo1$coefficients[3]
# valor do x = peso
modelo1$coefficients[4]
# valor do x = aceleracao
modelo1$coefficients[5]
# valor do x = anoModelo
modelo1$coefficients[5]
# Calculo do Valor predito
valoresPreditos1 = predict(modelo1, newdata = data.frame(testeDados) )
# Métricas para Avaliar o modelo
modeloAjustado1 = R2(valoresPreditos1, testeDados$mpg)
ErroAbsoluto1   = MAE(valoresPreditos1, testeDados$mpg)
#y= a+b*x
x=dados$cilindros[1]
Yestimado = modelo1$coefficients[1] + modelo1$coefficients[2]*x #-> para deslocamento
#diagrama de dispersao
plot(modelo1$coefficients[1], modelo1$coefficients[2])
#criacao da linha do grafico de resposta da regressao
abline(modelo1)
#diagrama de dispersao
plot(fitted(modelo1), residuals(modelo1), xlab="Valores Ajustados", ylab="Resíduos")
# alternativas-> "two.sided", "less"-> menos, "greater"->maior
# nivel de confidencialidade = 95%-> conf.level = 0.95
t.test(modelo1, alternative="two.sided", conf.level = 0.95, mu = 690)
dados$cilindros
View(dados)
View(leituraArquivo)
# grafico de histograma
hist(dados$mpg, main="teste")
# grafico de histograma
hist(dados$mpg, main="Mpg")
# grafico de histograma
hist(dados$mpg, main="Mpg",xlab = "valor",ylab = mpg)
# grafico de histograma
hist(dados$mpg, main="Mpg",xlab = "valor",ylab = mpg)
# grafico de histograma
hist(dados$mpg, main="Mpg",xlab = "valor",ylab = mpg)
# grafico de histograma
hist(dados$mpg, main="Mpg",ylab = mpg)
# grafico de histograma
hist(dados$mpg, main="Mpg")
hist(dados$cilindros, main="Cilindros")
# grafico de histograma
hist(dados$mpg, main="Mpg")
# grafico de histograma
hist(dados$mpg, main="Mpg", xlab = "e")
# grafico de histograma
hist(dados$mpg, main="Mpg", xlab = "MPG")
# grafico de histograma
hist(dados$mpg, main="Mpg", xlab = "Mpg")
hist(dados$cilindros, main="Cilindros", xlab = "Cilindros")
# grafico de histograma
hist(dados$mpg, main="Mpg", xlab = "Mpg")
boxplot(dados$mpg, dados$cilindros)
boxplot(dados$mpg, dados$cilindros)
boxplot(dados$mpg, dados$cilindros, dados$deslocamento)
boxplot(dados$mpg, dados$cilindros)
boxplot(dados$mpg)
#y= a+b*x
x=dados$cilindros[1]
Yestimado = modelo1$coefficients[1] + modelo1$coefficients[2]*x #-> para deslocamento
modelo1$coefficients
boxplot(dados$mpg ~ dados$cilindros)
boxplot(dados$mpg ~ dados$deslocamento)
boxplot(dados$mpg ~ dados$peso)
boxplot(dados$mpg ~ dados$aceleracao)
boxplot(dados$mpg ~ dados$anoModelo)
boxplot(dados$mpg ~ dados$anoModelo,xlab = "mpg")
boxplot(dados$mpg ~ dados$anoModelo,ylab = "mpg")
boxplot(dados$mpg ~ dados$anoModelo,ylab = "mpg",ylab = "anoModelo")
boxplot(dados$mpg ~ dados$anoModelo,ylab = "mpg",xlab = "anoModelo")
boxplot(dados$mpg ~ dados$cilindros, ylab = "mpg", xlab = "cilindros")
boxplot(dados$mpg ~ dados$anoModelo, ylab = "mpg", xlab = "anoModelo")
boxplot(dados$mpg ~ dados$cilindros, ylab = "mpg", xlab = "cilindros", main="e")
boxplot(dados$mpg ~ dados$cilindros, ylab = "mpg", xlab = "cilindros", main="consumo de gasolina X Cilindros")
View(dados)
# grafico de linha
plot(dados$anoModelo, main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de barras
barplot(dados$cilindros)
# grafico de histograma
hist(dados$mpg, main="Mpg", xlab = "Mpg")
# grafico de linha
plot(modelo1$residuals, main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(modelo1$residuals[1], main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(modelo1$residuals[1],modelo1$residuals[2], main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
abline(modelo1)
# grafico de linha
plot(modelo1$coefficients[1],modelo1$coefficients[2], main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(modelo1$fitted.values[1],modelo1$fitted.values[2], main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$mpg,dados$cilindros, main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano", sub="subtitulo do grafico")
# grafico de linha
plot(dados$mpg,dados$cilindros, main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano")
# grafico de linha
plot(dados$mpg,dados$cilindros, main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano")
# grafico de linha
plot(dados$cilindros,dados$mpg, main = "teste", type="o", col="blue",lwd=1, xlab="matriculado", ylab="ano")
# grafico de linha
plot(dados$cilindros, dados$mpg, main = "teste", type="o", col="blue",lwd=1, xlab="cilindro", ylab="mpg")
# grafico de linha
plot(dados$cilindros, dados$mpg, main = "consumo combustivel X QTD. Cilindro", type="o", col="blue",lwd=1, xlab="cilindro", ylab="mpg")
# grafico de linha
plot(dados$cilindros, dados$mpg, main = "consumo combustivel X Qtd. Cilindro", type="o", col="blue",lwd=1, xlab="cilindro", ylab="mpg")
# grafico de linha
plot(dados$cilindros, dados$mpg, main = "consumo combustivel X Qtd. Cilindros", type="o", col="blue",lwd=1, xlab="Cilindro", ylab="Mpg")
#Gráfico histograma
hist(dados$cilindros, col="yellow", main="Distribuição normal")
amplitudeMpg          = ( range(dados$mpg)[2]          - range(dados$mpg)[1] )
amplitudeCilindros    = ( range(dados$cilindros)[2]    - range(dados$cilindros)[1] )
amplitudeDeslocamento = ( range(dados$deslocamento)[2] - range(dados$deslocamento)[1] )
amplitudePeso         = ( range(dados$peso)[2]         - range(dados$peso)[1] )
amplitudeAceleracao   = ( range(dados$aceleracao)[2]   - range(dados$aceleracao)[1] )
amplitudeAnoModelo    = ( range(dados$anoModelo)[2]    - range(dados$anoModelo)[1] )
amplitudeAceleracao
#-------------------------------------------------------------#
# amplitude de cada variavel quantitativa
#-------------------------------------------------------------#
View(amplitudeAceleracao)
range(dados)
# visualiza dados(min,max,mediana,media)
summary(dados)
# visualiza dados(min,max,mediana,media)
summary(dados$mpg)
# visualiza dados(min,max,mediana,media)
summary(dados$mpg, dados$cilindros)
# visualiza dados(min,max,mediana,media)
summary(dados)
amplitudeMpg          = ( range(dados$mpg)[2]          - range(dados$mpg)[1] )
amplitudeCilindros    = ( range(dados$cilindros)[2]    - range(dados$cilindros)[1] )
amplitudeDeslocamento = ( range(dados$deslocamento)[2] - range(dados$deslocamento)[1] )
amplitudePeso         = ( range(dados$peso)[2]         - range(dados$peso)[1] )
amplitudeAceleracao   = ( range(dados$aceleracao)[2]   - range(dados$aceleracao)[1] )
amplitudeAnoModelo    = ( range(dados$anoModelo)[2]    - range(dados$anoModelo)[1] )
amplitudeMpg          = ( range(dados$mpg)[2]          - range(dados$mpg)[1] )
amplitudeCilindros    = ( range(dados$cilindros)[2]    - range(dados$cilindros)[1] )
amplitudeDeslocamento = ( range(dados$deslocamento)[2] - range(dados$deslocamento)[1] )
amplitudePeso         = ( range(dados$peso)[2]         - range(dados$peso)[1] )
amplitudeAceleracao   = ( range(dados$aceleracao)[2]   - range(dados$aceleracao)[1] )
amplitudeAnoModelo    = ( range(dados$anoModelo)[2]    - range(dados$anoModelo)[1] )
#-------------------------------------------------------------#
# desvio padrao
#-------------------------------------------------------------#
desvioPadrao = sd(dados)
#-------------------------------------------------------------#
# desvio padrao
#-------------------------------------------------------------#
desvioPadrao = sd(dados)
desvioPadraoMpg          = sd(dados$mpg)
desvioPadraoCilindros    = sd(dados$cilindros)
desvioPadraoDeslocamento = sd(dados$deslocamento)
desvioPadraoPeso         = sd(dados$peso)
desvioPadraoAceleracao   = sd(dados$aceleracao)
desvioPadraoAnoModelo    = sd(dados$anoModelo)
# grafico de histograma
hist(dados$mpg, main="Mpg", xlab = "Mpg")
hist(dados$cilindros, main="Cilindros", xlab = "Cilindros")
hist(dados$deslocamento, main="Deslocamento", xlab = "Deslocamento")
hist(dados$peso, main="Peso", xlab = "Peso")
hist(dados$aceleracao, main="Aceleração", xlab = "Aceleração")
hist(dados$anoModelo, main="Ano Modelo", xlab = "Ano Modelo")
# grafico de histograma
hist(dados$mpg, main="Mpg", xlab = "Mpg")
hist(dados$cilindros, main="Cilindros", xlab = "Cilindros")
# grafico de histograma
hist(dados$mpg, main="Mpg", xlab = "Mpg", ylab = " ")
# grafico de histograma
hist(dados$mpg, main="Mpg", xlab = "Mpg", ylab = " ")
hist(dados$cilindros, main="Cilindros", xlab = "Cilindros", ylab = " ")
hist(dados$deslocamento, main="Deslocamento", xlab = "Deslocamento", ylab = " ")
hist(dados$peso, main="Peso", xlab = "Peso", ylab = " ")
hist(dados$aceleracao, main="Aceleração", xlab = "Aceleração", ylab = " ")
hist(dados$anoModelo, main="Ano Modelo", xlab = "Ano Modelo", ylab = " ")
library(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(corelacaoDeMPG,type = "upper", method="circle")
# para saber qual tem o maior coleração entre a coluna mpg
corelacaoDeMPG = cor(dados$mpg, dados$cilindros)
corrplot(corelacaoDeMPG,type = "upper", method="circle")
corrplot(corelacaoDeMPG, method="circle")
corrplot(corelacaoDeMPG, method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust",diag = FALSE)
# para saber qual tem o maior coleração entre a coluna mpg
corelacaoDeMPG = cor(dados)
corrplot(corelacaoDeMPG, method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust",diag = FALSE)
corrplot(corelacaoDeMPG, method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust")
corrplot(corelacaoDeMPG,main="Grafico de Correlação", method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust")
corrplot(corelacaoDeMPG,method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust")
#diagrama de dispersao
plot(fitted(modelo1), residuals(modelo1), xlab="Valores Ajustados", ylab="Resíduos")
#diagrama de dispersao
plot(fitted(modelo1), main = "diagrama de dispersão", residuals(modelo1), xlab="Valores Ajustados", ylab="Resíduos")
#diagrama de dispersao
plot(modelo1$coefficients[1], modelo1$coefficients[2])
#diagrama de dispersao
plot(modelo1$coefficients[1], modelo1$coefficients[2])
#criacao da linha do grafico de resposta da regressao
abline(modelo1)
boxplot(dados$mpg ~ dados$cilindros, ylab = "mpg", xlab = "cilindros", main="consumo de gasolina X Cilindros")
boxplot(dados$mpg ~ dados$anoModelo, ylab = "mpg", xlab = "anoModelo")
boxplot(dados$mpg ~ dados$cilindros, ylab = "mpg", xlab = "cilindros", main="consumo de gasolina X Cilindros")
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY = shapiro.test(ErroAbsoluto1)
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY = shapiro.test(ErroAbsoluto1)
ErroAbsoluto1
#diagrama de dispersao
plot(modelo1$coefficients[1], modelo1$coefficients[2])
#diagrama de dispersao
hist(modelo1$coefficients[1], modelo1$coefficients[2])
#diagrama de dispersao
hist(modelo1)
#diagrama de dispersao
hist(modelo1$coefficients)
#diagrama de dispersao
hist(valoresPreditos1)
# Métricas para Avaliar o modelo
modeloAjustado1 = R2(valoresPreditos1, testeDados$mpg)
ErroAbsoluto1   = MAE(valoresPreditos1, testeDados$mpg)
#diagrama de dispersao
plot(modeloAjustado1)
#diagrama de dispersao
plot(dados$mpg, dados$cilindros)
#diagrama de dispersao
hist(valoresPreditos1)
boxplot(dados$mpg ~ dados$cilindros, ylab = "mpg", xlab = "cilindros", main="consumo de gasolina X Cilindros")
boxplot(dados$mpg ~ dados$anoModelo, ylab = "mpg", xlab = "anoModelo")
boxplot(dados$mpg ~ dados$cilindros, ylab = "mpg", xlab = "cilindros", main="consumo de gasolina X Cilindros")
# para saber qual tem o maior coleração entre a coluna mpg
corelacaoDeMPG = cor(dados$mpg)
# para saber qual tem o maior coleração entre a coluna mpg
corelacaoDeMPG = cor(dados$mpg,dados$cilindros)
corrplot(corelacaoDeMPG,method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust")
# para saber qual tem o maior coleração entre a coluna mpg
corelacaoDeMPG = cor(dados$mpg,dados$cilindros)
corrplot(corelacaoDeMPG,method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust")
library(corrplot)
corrplot(corelacaoDeMPG,method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust")
# para saber qual tem o maior coleração entre a coluna mpg
corelacaoDeMPG = cor(dados)
corrplot(corelacaoDeMPG,method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust")
#diagrama de dispersao
plot(fitted(modelo1), main = "diagrama de dispersão", residuals(modelo1), xlab="Valores Ajustados", ylab="Resíduos")
#conseguir comparar dados de consumo de gasolina com mpg e depois cilindros e deslocamento
comparacao1 = aov(dados$mpg ~ dados$cilindros + dados$deslocamento + dados$peso)
#dados da tabela dotipo Anova
summary(comparacao1)
comparacao2 = aov(dados$mpg ~ dados$cilindros + dados$aceleracao + dados$anoModelo)
#dados da tabela dotipo Anova
summary(comparacao2)
# alternativas-> "two.sided", "less"-> menos, "greater"->maior
# nivel de confidencialidade = 95%-> conf.level = 0.95
t.test(dados$cilindros, alternative="two.sided", conf.level = 0.95, mu = 690)
# alternativas-> "two.sided", "less"-> menos, "greater"->maior
# nivel de confidencialidade = 95%-> conf.level = 0.95
t.test(ErroAbsoluto1,ErroAbsoluto2, alternative="less", conf.level = 0.95)
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo2 = lm(mpg ~ dados$cilindros,dados$aceleracao,dados$anoModelo, data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos2 = predict(modelo2, newdata = data.frame(testeDados) )
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo2 = lm(mpg ~ cilindros,aceleracao,anoModelo, data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos2 = predict(modelo2, newdata = data.frame(testeDados) )
# Métricas para Avaliar o modelo
modeloAjustado2 = R2(valoresPreditos2, testeDados$mpg)
ErroAbsoluto2   = MAE(valoresPreditos2, testeDados$mpg)
# alternativas-> "two.sided", "less"-> menos, "greater"->maior
# nivel de confidencialidade = 95%-> conf.level = 0.95
t.test(ErroAbsoluto1,ErroAbsoluto2, alternative="less", conf.level = 0.95)
ErroAbsoluto1
# alternativas-> "two.sided", "less"-> menos, "greater"->maior
# nivel de confidencialidade = 95%-> conf.level = 0.95
t.test(valoresPreditos1,valoresPreditos2, alternative="less", conf.level = 0.95)
t.test(valoresPreditos1,valoresPreditos3, alternative="less", conf.level = 0.95)
#diagrama de dispersao
plot(fitted(modelo1), main = "diagrama de dispersão", residuals(modelo1), xlab="Valores Ajustados", ylab="Resíduos")
plot(fitted(modelo2), main = "diagrama de dispersão", residuals(modelo2), xlab="Valores Ajustados", ylab="Resíduos")
plot(fitted(modelo2), main = "diagrama de dispersão", residuals(modelo3), xlab="Valores Ajustados", ylab="Resíduos")
plot(fitted(modelo3), main = "diagrama de dispersão", residuals(modelo3), xlab="Valores Ajustados", ylab="Resíduos")
plot(fitted(modelo2), main = "diagrama de dispersão", residuals(modelo2), xlab="Valores Ajustados", ylab="Resíduos")
plot(fitted(modelo2), main = "diagrama de dispersão2", residuals(modelo2), xlab="Valores Ajustados", ylab="Resíduos")
plot(fitted(modelo3), main = "diagrama de dispersão3", residuals(modelo3), xlab="Valores Ajustados", ylab="Resíduos")
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo3 = lm(mpg ~ dados$anoModelo, data = treinamentoDados)
#valor de intercept
modelo3$coefficients[1]
# valor do x = cilindros
modelo3$coefficients[2]
# Calculo do Valor predito
valoresPreditos3 = predict(modelo3, newdata = data.frame(testeDados) )
# Métricas para Avaliar o modelo
modeloAjustado3 = R2(valoresPreditos3, testeDados$mpg)
ErroAbsoluto3   = MAE(valoresPreditos3, testeDados$mpg)
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo3 = lm(mpg ~ dados$anoModelo, data = treinamentoDados)
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo3 = lm(mpg ~ dados$cilindros, data = treinamentoDados)
# Construção do Modelo de Regressão(comparando mpg com todos)
modelo3 = lm(mpg ~ cilindros, data = treinamentoDados)
# Calculo do Valor predito
valoresPreditos3 = predict(modelo3, newdata = data.frame(testeDados) )
# Métricas para Avaliar o modelo
modeloAjustado3 = R2(valoresPreditos3, testeDados$mpg)
ErroAbsoluto3   = MAE(valoresPreditos3, testeDados$mpg)
plot(fitted(modelo3), main = "diagrama de dispersão3", residuals(modelo3), xlab="Valores Ajustados", ylab="Resíduos")
#diagrama de dispersao
plot(fitted(modelo3), main = "diagrama de dispersão3", residuals(modelo3), xlab="Valores Ajustados", ylab="Resíduos")
# alternativas-> "two.sided", "less"-> menos, "greater"->maior
# nivel de confidencialidade = 95%-> conf.level = 0.95
t.test(valoresPreditos1,valoresPreditos2, alternative="less", conf.level = 0.95)
# grafico de linha
plot(dados$cilindros, dados$mpg, main = "consumo combustivel X Qtd. Cilindros", type="o", col="blue",lwd=1, xlab="Cilindro", ylab="Mpg")
#diagrama de dispersao
plot(fitted(modelo1), main = "diagrama de dispersão1", residuals(modelo1), xlab="Valores Ajustados", ylab="Resíduos")
#diagrama de dispersao
plot(fitted(modelo3), main = "diagrama de dispersão3", residuals(modelo3), xlab="Valores Ajustados", ylab="Resíduos")
#correlacção nome das variaveis
corrplot(corelacaoDeMPG, method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust")
#conseguir comparar dados de consumo de gasolina com mpg e depois cilindros e deslocamento
comparacao1 = aov(dados$mpg ~ dados$cilindros + dados$deslocamento + dados$peso)
#dados da tabela dotipo Anova
summary(comparacao1)
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY = shapiro.test(valoresPreditos1)
# Kolmogorov-Smirnov
ks.test(valoresPreditos1, "pnorm", mean(valoresPreditos1), sd(valoresPreditos1))
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY2 = shapiro.test(valoresPreditos2)
# Kolmogorov-Smirnov
ks.test(valoresPreditos2, "pnorm", mean(valoresPreditos2), sd(valoresPreditos2))
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY2 = shapiro.test(valoresPreditos2)
# Kolmogorov-Smirnov
ks.test(valoresPreditos2, "pnorm", mean(valoresPreditos2), sd(valoresPreditos2))
#Teste de Normalidade Shapiro-Wilk
shapiroNormalidadeY3 = shapiro.test(valoresPreditos3)
# Kolmogorov-Smirnov
ks.test(valoresPreditos3, "pnorm", mean(valoresPreditos3), sd(valoresPreditos3))
#Gráfico histograma
hist(dados$cilindros, col="yellow", main="Distribuição normal")
#Traçando a curva da normal
curve(dnorm, add=TRUE)
#Gráfico histograma
hist(dados, main="Distribuição normal")
#Gráfico histograma
hist(dados, main="Distribuição normal")
$cilindros
#Gráfico histograma
hist(dados$cilindros, main="Distribuição normal")
#Gráfico histograma
hist(dados, main="Distribuição normal")
#Gráfico histograma
hist(dados$mpg, main="Distribuição normal")
#correlacção nome das variaveis
corrplot(corelacaoDeMPG, method="circle",type = "upper", tl.pos = "td",tl.cex = 0.5,tl.col = 'brank',order = "hclust")
#diagrama de dispersao
plot(dados$mpg, dados$cilindros)
#diagrama de dispersao
plot(fitted(modelo1), main = "diagrama de dispersão1", residuals(modelo1), xlab="Valores Ajustados", ylab="Resíduos")
#diagrama de dispersao
plot(fitted(modelo2), main = "diagrama de dispersão2", residuals(modelo2), xlab="Valores Ajustados", ylab="Resíduos")
#diagrama de dispersao
plot(fitted(modelo3), main = "diagrama de dispersão3", residuals(modelo3), xlab="Valores Ajustados", ylab="Resíduos")
#Gráfico histograma
hist(dados$mpg, main="Distribuição normal")
