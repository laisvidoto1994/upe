/**
 * Base definition of Action Launcher and Entity template controls
 *
 * @author: Edward Morales
 */
bizagi.rendering.render.extend("bizagi.rendering.actionLauncher", {}, {
    /*
     * Constructor
     */
    init: function(params) {
        // Call base
        this._super(params);
    },

    /*
     * Initialize the control with data provided
     */
    initializeData: function(data) {
        var self = this;
        // Call base
        this._super(data);
        var form = self.getFormContainer();
        this.typeForm = form.properties.typeForm || "";
        var mode = self.getMode();
        var properties = self.properties;

        self.deferredActions = new $.Deferred();
        self.deferredActions.promise();

        if (mode == "execution") {
            self.engine = new bizagi.templateEngine({
                renderFactory: self.renderFactory,
                cache: true,
                autoGenerateData: false,
                templateGuid: properties.selecttemplate
            });
        }

        // Data of get process property value
        self.processPropertyValueArgs = {
            "pcaseId": self.getIdCase(),
            "pguidEntity": self.properties.guidEntity,
            "idRender": self.properties.id,
            "xpathContext": form.properties.xpathContext,
            "idPageCache": form.properties.idPageCache,
            "property": "data",
            "psurrogatedKey": self.properties.surrogatedKey,
            "ptags": self.properties.tagslist || [],
            "pmaxitems": self.properties.maxItems,
            "pactionXpath": self.properties.xpathActions
        };

        self.processPropertyValueDataTmplArgs = {
            "pactionXpath": self.properties.xpathActions,
            "idRender": self.properties.id,
            "xpathContext": form.properties.xpathContext,
            "idPageCache": form.properties.idPageCache,
            "ptemplateGuid": properties.selecttemplate,
            "property": "dataTemplate",
            "xpathActions": self.properties.xpathActions
        };

        self.properties.valueWidth = 100;
        self.properties.displayType = "value";
        var defaultAllowActions = data.properties.type === "entityTemplate" ? false : true;
        self.properties.allowactions = (typeof data.properties.allowactions == "undefined")
            ? defaultAllowActions : data.properties.allowactions;
        self.properties.isHorizontal = (typeof data.properties.isHorizontal == "undefined")
            ? true : data.properties.isHorizontal;
        self.properties.allowSearch = (typeof data.properties.allowSearch == "undefined")
            ? false : data.properties.allowSearch;
        self.properties.selecttemplate = (typeof data.properties.selecttemplate == "undefined")
            ? "" : data.properties.selecttemplate;
        self.properties.templatetype = (typeof properties.templatetype != "undefined")
            ? properties.templatetype : 'none';

        if (!self.properties.value) {
            self.properties.value = self.value = [];
            self.properties.originalValue = [];
        } else if (typeof self.properties.value == "string") {
            self.properties.value = self.value = JSON.parse(self.properties.value);
        }
    },

    /**
     * Send processpropertyvalue in order to execute an Action
     * This method is used when this control stay in Summary form or Global form
     * @param action
     */
    executeActionImmediately: function(action) {
        var self = this;
        //Execute action immediately
        var form = self.getFormContainer();

        var processPropertyValueExecuteAction = {
            "idRender": self.properties.id,
            "xpathContext": form.properties.xpathContext,
            "idPageCache": form.properties.idPageCache,
            "property": "executeAction",
            "psurrogatedKey": self.properties.surrogatedKey,
            "pguidAction": action.guidAction,
            "pparameters": JSON.encode({
                "idStartScope": action.idStartScope,
                "pactionXpath": self.properties.xpathActions,
                "idPageCache": action.idPageCache
            })
        };

        self.dataService.executeActions(processPropertyValueExecuteAction).done(function(data) {
            self.notifyExecution(data, action);
        }).fail(function(error) {
            // TODO: Create generic mechanism to send notifications
            self.notifyExecution("Error", action);
        });
    },

    /**
     * notify action execution status
     * @param response
     * @param actionName
     */
    notifyExecution: function(response, actionName) {
        // To override in each device
    },

    /**
     * Render control in read only mode: properties.editable = false
     * @return {*}
     */
    renderReadOnly: function() {
        return this.renderControl();
    },

    /**
     * Make a postrender of readonly control
     */
    postRenderReadOnly: function() {
        this.properties.readOnly = true;
        this.postRender();
    },

    /**
     * Template method to implement in each children to customize each control
     * @return {string}
     */
    renderControl: function() {
        var self = this;
        var properties = self.properties;
        var mode = self.getMode();
        var template;
        var html = "";

        // Render template
        if (mode == "design") {
            template = self.renderFactory.getTemplate("render-actionLauncher-design");
            var params = {
                type: properties.type,
                isHorizontal: properties.isHorizontal,
                allowSearch: properties.allowSearch,
                templateDefined: properties.templatetype != 'none',
                allowactions: properties.allowactions
            };
            html = $.fasttmpl(template, params);
        } else if (properties.surrogatedKey) {
            template = self.renderFactory.getTemplate("render-actionLauncher");
            html = $.fasttmpl(template, { allowactions: self.properties.allowactions });
        }
        return html;
    },


    /**
     * Public method to determine if a value is valid or not
     * @param invalidElements
     * @return {*}
     */
    isValid: function(invalidElements) {
        var self = this,
            properties = self.properties;
        var value = self.getValue();
        var bValid = false;

        // Don't check non-editable renders
        if (bizagi.util.parseBoolean(properties.visible) == false) {
            return true;
        }
        // Don't check non-editable renders
        if (bizagi.util.parseBoolean(properties.editable) == false) {
            return true;
        }

        // Check required
        if (properties.required) {
            if (self.value) {
                if (self.value.length > 0)
                    return true;
                message = self.getResource("render-required-register-action");
                invalidElements.push({ xpath: properties.xpath, message: message });
                return false;
            }
        }

        return bValid;
    },

    /**
     * Sets the value in the rendered control
     * @param value
     */
    setDisplayValue: function(value) {
        var self = this;
        var control = self.getControl();
        // TODO: write functionality
        // Set internal value
        self.setValue(value, false);
    },

    /**
     * Process an action
     * @param action
     */
    actionManager: function(action) {
        var self = this;
        var guidProcess = action.guidProcess || "";
        var def = new $.Deferred();

        action.recordXpath = self.getFormContainer().properties.recordXpath;

        /**
         * Check if action is a process
         */
        switch (action.actionType) {
        case "Process":
            // Verify if case has startform
            var params = {
                guidWFClass: guidProcess
            };

            $.when(self.dataService.hasStartForm(params)).done(function(result) {
                if (result.hasStartForm) {
                    // Open a dialog with startform and wait for Scope
                    $.when(self.processStartForm({
                        guidprocess: guidProcess,
                        title: action.displayName,
                        recordXpath: action.recordXpath
                    })).done(function(idStartScope) {
                        action.idStartScope = idStartScope;
                        def.resolve(action);
                    });
                } else {
                    // Just add action to queue to be executed on nextEvent
                    def.resolve(action);
                }
            });

            break;
        case "Rule":
            // Just add action to queue to be executed on nextEvent
            def.resolve(action);
            break;
        case "Form":
            // If it has additional xpath this action is a form of collection
            if (action.xpathContext) {
                $.when(self.processActionFormCollection(action)).done(function(idStartScope) {
                    action.idStartScope = idStartScope;
                    def.resolve(action);
                });
            } else {

                if (action.actionType === "Form") {
                    action.xpathContext = undefined;
                    action.contextType = "entitytemplate";
                    action.guidEntity = action.guidEntity || self.properties.guidEntity;
                }

                $.when(self.processActionForm(action)).done(function(idStartScope) {
                    action.idStartScope = idStartScope;
                    def.resolve(action);
                });
            }
            break;
        }

        return def.promise();
    },

    /**
     * Add actions within value object
     * @param action
     */
    addActionToQueue: function(action) {
        var self = this;
        var actionsList = self.getValue();
        var formParams = self.getFormContainer().getParams();

        action.params = action.params || {};

        var recordXpath = self.properties.xpathContext;

        switch (action.actionType) {
        case "Process":
            action.params = {
                idStartScope: action.idStartScope,
                additionalXpaths: self.properties.additionalXpath.join(","),
                idParentWorkitem: formParams.idWorkitem || bizagi.context.idWorkItem,
                recordXpath: recordXpath
            };
            break;
        case "Form":
            action.params = {
                idStartScope: action.idStartScope,
                additionalXpaths: self.properties.additionalXpath.join(","),
                entityXpath: self.properties.xpathActions,
                idParentWorkitem: formParams.idWorkitem || bizagi.context.idWorkItem,
                idEntity: action.idEntity
            };
            break;
        case "Rule":
            action.params = {
                xpathActions: action.xpathActions || "",
                recordXpath: recordXpath
            };
            break;
        }

        var newValueActionsList = bizagi.clone(actionsList);
        newValueActionsList.push(action);
        self.setValue(newValueActionsList);
        self.setDisplayValue(newValueActionsList);
    },

    /**
     * Remove action within value object
     * @param index
     */
    removeActionToQueue: function(index) {
        var self = this;
        var newValueActionsList = bizagi.clone(self.getValue());
        newValueActionsList.splice(index, 1);
        self.setValue(newValueActionsList);
        self.setDisplayValue(newValueActionsList);
    },
    /**
     * Add the render data to the given collection in order to send data to the server
     * @param renderValues
     */
    collectData: function(renderValues) {
        var self = this;
        if (self.controlValueIsChanged()) {
            var properties = self.properties;
            var xpath = properties.xpath;
            var controlValue = self.getValue();
            var actions = [];
            $.each(controlValue, function(index, value) {
                var action = {};
                action.params = value.params || {};
                action.guidAction = value.guidAction;

                actions.push(action);
            });
            renderValues[xpath] = (actions.length == 0) ? "" : JSON.encode(actions);
        }
    },

    /**
     * Util to count how many actions are there
     * @param action
     * @return {number}
     */
    countSameActions: function(action) {
        var self = this;
        var value = self.getValue();
        var count = 0;
        $.each(value, function(key, value) {
            if (value.guidAction == action.guidAction) {
                count++;
            }
        });
        return count;
    },

    /**
    * Normalize action launcher control properties
    * @param actionsLaucher
    * @returns {*}
    */
    getPropertiesActionLaucher: function(actionsLaucher) {
        var self = this;
        var form = self.getFormContainer();
        /**
         * The properties of actionLaucher have to 7 properties mandatory
         * 0: guidProcess
         * 1: displayName
         * 2: title
         * 3: actionType
         * 4: guidaction
         * 5: xpathContext
         * 6: readOnlyForm: default: false
         */
        for (var i = 0, length = actionsLaucher.length, j = length; i < j; i += 1) {
            //some ocassions server return 6 or 7 items
            //return 6 properties when launch form action from action launcher control.
            //in this case dont return xpathContext.
            // So, add item position 5, simulate xpathContext empty.
            if (actionsLaucher[i].length === 6) {
                actionsLaucher[i].splice(5, 0, "");

                if (actionsLaucher[i][3] == "Process" && form.properties.xpathContext) {
                    actionsLaucher[i][5] = form.properties.xpathContext;
                }
            }
        }

        return actionsLaucher;
    }
});
