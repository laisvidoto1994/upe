/*
*   Name: BizAgi Workportal Smartphone Routing Widget Controller
*   Author: Oscar O
*   Comments: Provide Smartphone overrides to implement the render widget   
*/

// Auto extend
bizagi.workportal.widgets.render.extend('bizagi.workportal.widgets.render', {}, {
    init: function (workportalFacade, dataService, params) {
        var self = this;
	
        self.menu = params.menu;
        self._super(workportalFacade, dataService, params);
    },

    getMenu: function () {
        return this.menu;
    },

    /* POST RENDER ACTIONS
    =================================================*/
    postRender: function () {
        var self = this;
    },

    renderSummary: function (data) {
        var self = this;

        if(data.currentState && data.currentState[0] && data.currentState[0].allowReleaseActivity){
            self.publish("appendWidgetTo", {
                widgetName: bizagi.workportal.widgets.widget.BIZAGI_WORKPORTAL_WIDGET_BIZAGI_RELEASE,
                options: {
                    idCase: self.params.idCase,
                    idWorkitem: self.params.idWorkitem
                }
            });
        }

        for (var i = 0; i < data.currentState.length; i++) {
            if (data.currentState[i].idTask == data.params.idTask) {
                if (data.currentState[i].state) {
                    self.notifiesNavigation(data.currentState[i].state);
                } else {
                    self.notifiesNavigation(data.caseNumber);
                }
            }
        }

        if (data.params && data.params.referrer !== "undefined" && data.params.referrer == "newCase") {
            return;
        }
    },

    showMenuComplexGateway: function (transitions) {
        var self = this;

        if (bizagi.cache === undefined) {
            bizagi.cache = {};
        }

        bizagi.cache[self.params.idCase] = {
            idTask: self.params.idTask,
            idWorkitem: self.params.idWorkitem,
            isComplex: true
        };

        if (bizagi.cache.idCaseObject === undefined) {
            bizagi.cache.idCaseObject = {};
        }
        if (bizagi.cache.idCaseObject.idCase === undefined) {
            bizagi.cache.idCaseObject.idCase = self.params.idCase;
            bizagi.cache.idCaseObject.isComplex = true;
        } else {
            bizagi.cache.idCaseObject.isComplex = true;
        }

        self.currentPopup = "complexgateway";
        self.publish("showDialogWidget", {
            widgetName: bizagi.workportal.widgets.widget.BIZAGI_WORKPORTAL_WIDGET_COMPLEXGATEWAY,
            data: {
                transitions: transitions
            },
            modalParameters: {
                title: "titulo",
                width: 200,
                height: 200
            },
            onClose: function () {
                //
            }
        });
    },

    renderForm: function (params) {
        var self = this, resultRender;
        var originalParams = this.params;
        var proxyPrefix = (typeof (self.dataService.serviceLocator.proxyPrefix) != undefined) ? self.dataService.serviceLocator.proxyPrefix : "";
        var rendering = new bizagi.rendering.facade({ "proxyPrefix": proxyPrefix });
        var renderContainer = self.getComponentContainer("render");

        if (this.menu == undefined) {
            this._super(params);
            return true;
        }

        if (params.withOutGlobalForm) {
            var errorTemplate = self.workportalFacade.getTemplate("info-message");
            var message = (params.messageForm !== "") ? params.messageForm : self.resources.getResource("render-without-globalform");

            var errorHtml = $.tmpl(errorTemplate, {
                message: message
            });

            errorHtml.appendTo(renderContainer);
            self.getMenu().emptySuscribers();
            self.getMenu().changeContextualButtons("disable");

            resultRender = $.Deferred();
            resultRender.fail();
            self.attachEventsLink("noForm");
            return resultRender;
        }

        $(renderContainer).bind("errorform", function (event, type) {

            //when this happens it means that the container was rendered with some item renders, 
            //but one was generated by some server error, you have to remove the back logged by the container renders
            if (type && type == "renderItemError") {
                self.getMenu().removeLastSuscriber();
                bizagi.util.smartphone.stopLoading();
            }


            self.getMenu().nextSuscribe(self.params.idCase,
                function (args) {
                    if (args.action == "back") {

                        self.getMenu().publish("popWidget", {
                            widgetName: bizagi.workportal.widgets.widget.BIZAGI_WORKPORTAL_WIDGET_RENDER,
                            componentPop: "render",
                            componentPush: ""
                        });
                        self.getMenu().changeContextualButtons("search");
                        self.getMenu().removeSuscriber(args.key, false);
                    }

                }, function (args) {
                    if (args.action == "back") {
                        self.getMenu().changeContextualButtons("search");
                    }

                });
        });

        /* 
        bizagi.rendering.render.maxRendersPerScreen = 10;
        bizagi.rendering.render.startOptimization = function () {
        bizagi.rendering.render.postRenderTimeout = 500;
        bizagi.rendering.render.rendersExecuted = 0;
        bizagi.rendering.render.renderOptimization = true;
        };
        */

        // Executes rendering into render container
        //si no es pasando parametros como processButtons es con un suscribe
        $.when(resultRender = rendering.execute($.extend(params, {
            canvas: renderContainer,
            menu: self.menu,
            processButtons: self.processButtons,
            getButtons: self.getButtons,
            postRenderEdit: self.postRenderEdit,
            originalParams: originalParams
        }))
        ).done(
            function () {
                bizagi.util.smartphone.stopLoading();
                self.attachEventsLink("form");
            });

        // Attach handler to render container to subscribe for routing events
        renderContainer.bind("routing", function (context, triggerparams) {
            // Executes routing action

            var params = {
                action: bizagi.workportal.actions.action.BIZAGI_WORKPORTAL_ACTION_ROUTING,
                idCase: self.params.idCase,
                idTask: self.params.idTask,
                idWorkitem: self.params.idWorkitem,
                radNumber: self.params.radNumber,
                fromTask: self.params.fromTask,
                isOfflineForm: self.params.isOfflineForm,
                formsRenderVersion: self.params.formsRenderVersion,
                onClose: function () {
                    // If the user closes the dialog we need to redirect to inbox widget
                    self.publish("changeWidget", {
                        widgetName: bizagi.workportal.currentInboxView
                    });
                }
            };
            params = $.extend(params, triggerparams);
            self.publish("executeAction", params);
        });

        // Keep reference to rendering facade
        self.renderingFacade = rendering;

        // Resize layout
        self.resizeLayout();

        return resultRender;
    },

    //recibe el contexto por que si es llamado y se utiliza el this es el objeto general de js
    getButtons: function (context) {
        var self = context;
        var properties = self.properties;
        properties.buttons = context.buttons;

        var container = self.container;
        //TODO:hide the normal buttons 
        // $(".ui-bizagi-button-container :button", container).hide();

        //self.getMenu().changeContextualButtons("button");
        //TODO: crear tmpl botones dinamicos
        if (properties.buttons.length <= 2 && self.nextButton != null && self.saveButton != null) {
            //si el length 2 o 1  
            //buscar los otrso 4 botones
            return self.getMenu().getContent().find(".bz-common-webkit-reset-ul [ordinal]");
        } else {
            //use defer
            //self.getMenu().changeContextualButtons("dynamic");
            return self.getMenu().dynamicButtons(properties.buttons);
        }

    },

    getEndFormButtons: function (context) {
        var self = context || this;
        return $(".ui-bizagi-button-container button", self.container);
    },

    processButtons: function (context) {
        var self = context;
        var params = self.getParams();
        var properties = self.properties;
        properties.buttons = context.buttons;

        var i;
        self.saveButton = null;
        self.nextButton = null; //to cache a submit Data Buttom if exist
        var len = properties.buttons.length;

        //Set saveButton and nextButton if exist
        for (i = 0, len; i < len; i++) {
            if (properties.buttons[i].action == "save") {
                self.saveButton = properties.buttons[i];
            }
            if (properties.buttons[i].action == "next") {
                self.nextButton = properties.buttons[i];
            }
        }

        var buttons = self.getButtons();

        //bug fixing for integration
        properties.buttons = context.buttons;

        if (!buttons || buttons.length == 0 || properties.buttons.length == 0) {
            self.getMenu().changeContextualButtons("button", { visible: false });
            self.getMenu().changeContextualButtons("back", { visible: false });
            return;
        }

        if (params.isRefresh) {
            self.getMenu().removeSuscriber(self.properties.id, false);
        }

        if (properties.buttons.length <= 2 && self.nextButton != null && self.saveButton != null) {
            self.getMenu().changeContextualButtons("button", { value: self.nextButton.caption });
        } else {
            self.getMenu().changeContextualButtons("dynamic");
        }

        var componentPush = (self.params.originalParams.referrer == "inbox") ? "workportal" : self.params.originalParams.referrer;
        $.when(self.getMenu().nextSuscribe(self.properties.id,
                function (args) {
                    if (args.action == "back") {

                        if (self.saveButton != null) {
                            self.saveButton.refresh = false;
                            $.when(self.processButton(self.saveButton)).done(function () {
                                //no siempre se activa el popwidget 
                                /*   if (componentPush.toLowerCase() == "activityform") {
                                componentPush = "workportal";
                                //todo pendiente widget visible
                                }*/

                                $.when(self.getMenu().publish("popWidget", {
                                    widgetName: bizagi.workportal.widgets.widget.BIZAGI_WORKPORTAL_WIDGET_RENDER,
                                    componentPop: "render",
                                    componentPush: componentPush
                                }),
                                    self.getMenu().changeContextualButtons("search"),
                                    self.getMenu().removeSuscriber(args.key, false)
                                ).done(function () {
                                    if (self.params.originalParams.referrer == "search" || self.params.originalParams.referrer == "newCase" || self.params.originalParams.referrer == "activityform") {
                                        self.getMenu().publish("changeWidget", {
                                            widgetName: bizagi.workportal.widgets.widget.BIZAGI_WORKPORTAL_WIDGET_INBOX
                                        });
                                    }
                                });

                            }).fail(function () {
                                bizagi.log("Fail save Action");
                            });
                        } else {
                            $.when(self.getMenu().publish("popWidget", {
                                widgetName: bizagi.workportal.widgets.widget.BIZAGI_WORKPORTAL_WIDGET_RENDER,
                                componentPop: "render",
                                componentPush: componentPush
                            }),
                                self.getMenu().changeContextualButtons("search"),
                                self.getMenu().removeSuscriber(args.key, false)).done(function () {
                                    if (self.params.originalParams.referrer == "search" || self.params.originalParams.referrer == "newCase" || self.params.originalParams.referrer == "activityform") {
                                        self.getMenu().publish("changeWidget", {
                                            widgetName: bizagi.workportal.widgets.widget.BIZAGI_WORKPORTAL_WIDGET_INBOX
                                        });
                                    }
                                });
                        }
                    }
                    if (args.action == "buttom") {
                        var valid = bizagi.util.parseBoolean(self.nextButton.validate) ? self.validationController.performValidations() : true;
                        self.processButton(self.nextButton);
                        //se podria usar un trigger para notificar cuando no sea necesario remover el evento
                        // fix for complexgateway next
                        var properties = self.params.originalParams;
                        if (properties.dataComplexGateway === undefined) {
                            if (valid)
                                self.getMenu().removeSuscriber(args.key);
                        }

                    }
                    if (args.action == "dynamic") {
                        self.processButton(self.properties.buttons[args.ordinal]);
                    }

                }, function (args) {
                    if (args.action == "back") {
                        //esto lo deberia hacer el callback o activateWidget
                    }

                })
        ).done(function () {
            if (componentPush == "search") {
                //  self.getMenu().changeContextualButtons("back", { visible: false });
            }
        });

    },

    //edit Items on render 
    postRenderEdit: function (contextI) {
        var self = contextI;
        var context = self.getFormContainer().container;
        var properties = self.properties;
        var actualscroll = $("body").scrollTop();
        var actualContextualButtons = self.getMenu().getActualStateContextualButtons();

        $("#container-items-edit", context).find(".ui-bizagi-container-inputs").remove();

        var fordwardActionCommon = function () {

            $("#container-items-edit", context).empty();
            $(".ui-bizagi-button-container", context).hide();
            $('.ui-bizagi-container-complexgateway', context).hide();

            setTimeout(function () { window.scrollTo(0, 0); }, 5);
            $(".ui-bizagi-container-children-form", context).removeClass("slide in reverse").addClass("slide out"); //.hide();
            $("#container-items-edit", context).show();
            $("#container-items-edit", context).removeClass("slide out reverse").addClass("slide in"); //.show();            
        };
        fordwardActionCommon();

        var backActionCommon = function () {

            $(".ui-bizagi-container-children-form", context).show();
            $(".ui-bizagi-container-children-form", context).removeClass("slide out").addClass(" slide in reverse");
            $("#container-items-edit", context).removeClass("slide in").addClass(" slide out reverse");

            $(".ui-bizagi-button-container", context).show();
            $('.ui-bizagi-container-complexgateway', context).show();

            setTimeout(function () { window.scrollTo(0, actualscroll); }, 10);
        };

        $("#container-items-edit", context).append($.tmpl(self.renderFactory.getTemplate("editRender"), { "label": properties.displayName }));
        $("#container-items-edit", context).find(".ui-bizagi-container-inputs").html(self.inputEdition);
        var contexttmp = self.contextEdit = $(context).find("#container-items-edit");
        $(".ui-bizagi-container-button-edit", contexttmp).hide();


        /*
        
        if (params.isRefresh) {
        self.getMenu().removeSuscriber(self.properties.id, false);
        }
        */

        $.when(self.getMenu().nextSuscribe(self.properties.id || self.properties.idRender, function (args) {

            if (args.action == "back") {
                self.getMenu().removeSuscriber(args.key);
                backActionCommon();
            }

            if (args.action == "buttom") {

                $.when(self.actionSave()).then(function (response) {

                    self.getMenu().removeSuscriber(args.key);

                    if (self.properties.submitOnChange) {
                        self.submitOnChange();
                    }

                    backActionCommon();

                }, function (response) {
                    //fail callback
                    if (response && response.noAction) {
                        return;
                    }

                    self.getMenu().removeSuscriber(args.key);
                    backActionCommon();

                });
            }
        }))
            .done(function () {
                self.getMenu().changeContextualButtons("button", { value: bizagi.localization.getResource("confirmation-box-ok") });
            });
    },

    /*
    *notify to suscribe the message in the header
    */
    notifiesNavigation: function (message) {
        var self = this;
        self.publish("notifiesNavigation", { message: message });
    },
    
    /*
    *append to form the bizagi events link
    */
    attachEventsLink: function (attachEventsTo) {
        var self = this;

        
        $.when(
            self.dataService.summaryCaseEvents({
                idCase: self.params.idCase
            })).done(function (events) {

                $(".ui-bizagi-container-events").remove();
                
                if (events.events != undefined & events.events.length > 0) {

                    self.publish("appendWidgetTo", {
                        widgetName: bizagi.workportal.widgets.widget.BIZAGI_WORKPORTAL_WIDGET_BIZAGI_EVENTS,
                        options: {
                            appendToElement: "body",
                            events: events,
                            attachEventsTo: attachEventsTo,
                            idCase: self.params.idCase,
                            routingExecuteCallBack: self.routingExecuteCall,
                            currentIdWorkitem: self.params.idWorkitem
                        }
                    });
                    
                } else {
                    $(document).unbind("attachEventElementToForm");
                }
            });
    }

});
